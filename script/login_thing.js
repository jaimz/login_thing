// Generated by LiveScript 1.2.0
(function(){
  var kDefaultUserId, kDebounceDefault, _, textFieldValue, setAttr, UserCard, init;
  kDefaultUserId = "primary";
  kDebounceDefault = 700;
  _ = Bacon;
  textFieldValue = function(textField){
    var value, changes;
    value = function(){
      return textField.value;
    };
    changes = _.fromEventTarget(textField, 'change');
    return _.fromEventTarget(textField, 'keyup').debounceImmediate(500).merge(changes).map(value).toProperty(value());
  };
  setAttr = function(node, attrName, attrValue){
    if (attrValue === false) {
      return node.removeAttribute(attrName);
    } else {
      return node.setAttribute(attrName, attrValue);
    }
  };
  UserCard = (function(){
    UserCard.displayName = 'UserCard';
    var prototype = UserCard.prototype, constructor = UserCard;
    function UserCard(RootView){
      var nonempty, usernameEntered, passwordEntered, loginEnabled, this$ = this;
      this.RootView = RootView != null
        ? RootView
        : document.getElementById(kDefaultUserId);
      this.doLogout = bind$(this, 'doLogout', prototype);
      this.didGetInfo = bind$(this, 'didGetInfo', prototype);
      this.didLogin = bind$(this, 'didLogin', prototype);
      this.startLogin = bind$(this, 'startLogin', prototype);
      this.showAvatar = bind$(this, 'showAvatar', prototype);
      this.lookupAvatar = bind$(this, 'lookupAvatar', prototype);
      if (this.RootView != null) {
        this.usernameIpt = this.RootView.querySelector("input[name=username]");
        this.passwordIpt = this.RootView.querySelector("input[name=password]");
        this.doLoginButton = this.RootView.querySelector("button[name=submit-login]");
        this.doLogoutButton = this.RootView.querySelector("button[name=sign-out]");
        this.avatarCoin = this.RootView.querySelector(".avatar");
        this.loginDialog = this.RootView.querySelector(".login.dialog");
        this.avatarCoin.addEventListener('click', function(e){
          this$.RootView.classList.toggle("will-login");
        });
        this._username = textFieldValue(this.usernameIpt);
        this._password = textFieldValue(this.passwordIpt);
        nonempty = function(x){
          return x.length > 0;
        };
        this._lookingUpAvatar = false;
        this._avatarLookupTimer = null;
        this._haveAvatar = false;
        this._username.onValue(this.lookupAvatar);
        usernameEntered = this._username.map(nonempty);
        passwordEntered = this._password.map(nonempty);
        loginEnabled = usernameEntered.and(passwordEntered);
        loginEnabled.onValue(function(enabled){
          setAttr(this$.doLoginButton, 'disabled', !enabled);
        });
        if (this.loginDialog != null) {
          this.loginDialog.addEventListener("submit", this.startLogin);
        }
        if (this.doLogoutButton != null) {
          this.doLogoutButton.addEventListener("click", this.doLogout);
        }
      } else {
        console.error("Was not supplied with user card (and could not find " + kDefaultUserId);
        return;
      }
    }
    prototype.lookupAvatar = function(username){
      if (this._avatarLookupTimer != null) {
        clearTimeout(this._lookingUpAvatar);
      }
      if (username.length > 0 && this._haveAvatar === false) {
        this.avatarCoin.classList.add('searching');
        this._avatarLookupTimer = setTimeout(this.showAvatar, 1000);
      }
    };
    prototype.showAvatar = function(){
      this.avatarCoin.classList.remove('searching');
      this.avatarCoin.classList.add('with-image');
      this._haveAvatar = true;
    };
    prototype.startLogin = function(e){
      this.RootView.classList.add('will-login');
      setTimeout(this.didLogin, 3000);
      return false;
    };
    prototype.didLogin = function(){
      this.usernameIpt.value = "";
      this.passwordIpt.value = "";
      this.RootView.classList.remove("will-login");
      this.RootView.classList.add("did-login");
      setTimeout(this.didGetInfo, 1500);
    };
    prototype.didGetInfo = function(){
      this.RootView.classList.add("did-get-info");
    };
    prototype.doLogout = function(){
      this.avatarCoin.classList.remove("with-image");
      this.RootView.classList.remove("did-login");
      this.RootView.classList.remove("did-get-info");
      this._haveAvatar = false;
    };
    return UserCard;
  }());
  init = function(){
    return window.userCard = new UserCard();
  };
  document.addEventListener("DOMContentLoaded", init);
  function bind$(obj, key, target){
    return function(){ return (target || obj)[key].apply(obj, arguments) };
  }
}).call(this);
